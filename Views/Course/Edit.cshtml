 @model TimeTable.ViewModels.CourseEditViewModel
<style>
    .custom-select-container {
        position: relative;
        width: 100%;
    }

    #majorSearch {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
    }

    .custom-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
        border: 1px solid #ccc;
        border-top: none;
        background-color: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: none;
        z-index: 10;
    }

    #majorList {
        margin: 0;
        padding: 0;
        list-style-type: none;
    }

    .custom-dropdown-item {
        padding: 8px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.2s ease;
    }

        .custom-dropdown-item:hover {
            background-color: #007bff;
            color: white;
        }

    #majorList li {
        padding: 8px;
        font-size: 14px;
        color: black;
    }

    #majorId {
        display: none;
    }
</style>


@using (Html.BeginForm("Edit", "Course", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)

    <div class="p-4 border rounded shadow bg-light">
        <h2 class="text-primary text-center mb-4">Edit Course</h2>

        <!-- Course Name -->
        <div class="form-group mb-3">
            @Html.LabelFor(model => model.Name, "Course Name", new { @class = "form-label" })
            @Html.TextBoxFor(model => model.Name, new { @class = "form-control border-primary" })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>

        <!-- Course Code -->
        <div class="form-group mb-3">
            @Html.LabelFor(model => model.CourseCode, "Course Code", new { @class = "form-label" })
            @Html.TextBoxFor(model => model.CourseCode, new { @class = "form-control border-primary" })
            @Html.ValidationMessageFor(model => model.CourseCode, "", new { @class = "text-danger" })
        </div>
        <div class="form-group mb-3">
            @Html.LabelFor(model => model.ShortTerm, "Short Term (Optional)", new { @class = "form-label" })
            @Html.TextBoxFor(model => model.ShortTerm, new { @class = "form-control border-secondary" })
        </div>

     
        <!-- Submit Button -->
        <div class="text-center mt-4">
            <button type="submit" class="btn btn-primary w-100">Save Changes</button>
        </div>
    </div>
}





<!-- Major Search Input -->
@* <div class="form-group mb-3"> *@
@*     <label class="form-label">Major</label> *@
@*     <div class="custom-select-container"> *@
@*         <input type="text" id="majorSearch" name="MajorName" *@
@*                class="form-control border-primary" *@
@*                placeholder="Search Major" *@
@*                autocomplete="off" *@
@*                required *@
@*                value="@Model.MajorName" /> *@
@*         <input type="hidden" id="majorId" name="MajorId" value="@Model.MajorId" /> *@
@*         <div id="majorDropdown" class="custom-dropdown"> *@
@*             <ul id="majorList"></ul> *@
@*         </div> *@
@*     </div> *@
@*     @Html.ValidationMessageFor(model => model.MajorName, "", new { @class = "text-danger" }) *@
@* </div> *@


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        const limit = 5;
        let majorPage = 1;

        $("#majorSearch").on("input", function () {
            var searchTerm = $(this).val();
            if (searchTerm.length >= 2) {
                searchMajors(searchTerm, majorPage);
            } else {
                $("#majorDropdown").hide();
            }
        });

        function searchMajors(searchTerm, page) {
            $.ajax({
                url: '/Course/Create',
                type: 'GET',
                data: { majorName: searchTerm, majorPage: page, limit: limit },
                success: function (response) {
                    updateDropdown("#majorDropdown", "#majorList", response.majors, 'major');
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching majors:", error);
                }
            });
        }

        function updateDropdown(dropdownSelector, listSelector, data, type) {
            const list = $(listSelector);
            list.empty();

            if (data && data.length > 0) {
                data.forEach((item) => {
                    list.append(`<li class="list-group-item custom-dropdown-item" data-id="${item.id}">${item.name}</li>`);
                });
                $(dropdownSelector).show();
            } else {
                list.append('<li class="list-group-item">No items found</li>');
                $(dropdownSelector).show();
            }
        }

        $(document).on('click', '.custom-dropdown-item', function () {
            const selectedText = $(this).text();
            const selectedId = $(this).data('id');
            $(this).closest('.custom-select-container').find('input').val(selectedText);
            $(this).closest('.custom-select-container').find('input[type="hidden"]').val(selectedId);
            $(this).closest('.custom-dropdown').hide();
        });

        $(document).on('click', function (e) {
            if (!$(e.target).closest('.custom-select-container').length) {
                $('.custom-dropdown').hide();
            }
        });
    });
</script>