@model TimeTable.Models.CourseViewModel

@{
    ViewData["Title"] = "Courses";
}

<h1 class="text-center">@ViewData["Title"]</h1>

<form method="get" class="mb-4">
    <div class="form-group">
        <label for="semester">Filter by Semester:</label>
        <select asp-for="Semester" class="form-control">
            @foreach (var semester in Enum.GetValues(typeof(TimeTable.Models.Semester)))
            {
                <option value="@semester">@semester</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Apply Filter</button>
</form>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Course Code</th>
            <th>Name</th>
            <th>Semester</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var course in Model.Courses)
        {
            <tr>
                <td>@course.CourseCode</td>
                <td>@course.Name</td>
                <td>@course.Semester</td>
                <td>
                    <a href="@Url.Action("Details", new { id = course.Id })" class="btn btn-info btn-sm">Details</a>
                    <a href="@Url.Action("Edit", new { id = course.Id })" class="btn btn-warning btn-sm">Edit</a>
                    <a href="@Url.Action("Delete", new { id = course.Id })" class="btn btn-danger btn-sm">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="d-flex justify-content-between align-items-center">
    <p>Page @Model.Page of @((int)Math.Ceiling((double)Model.TotalCourses / Model.Limit))</p>

    <div>
        <a href="@Url.Action("Index", new { page = Model.Page - 1, limit = Model.Limit, semester = Model.Semester })"
           class="btn btn-secondary btn-sm @if (Model.Page == 1) {
        <text>disabled</text>
 }">Previous</a>
        <a href="@Url.Action("Index", new { page = Model.Page + 1, limit = Model.Limit, semester = Model.Semester })"
           class="btn btn-secondary btn-sm @if (Model.Page == Math.Ceiling((double)Model.TotalCourses / Model.Limit)) {
        <text>disabled</text>
 }">Next</a>
    </div>
</div>
