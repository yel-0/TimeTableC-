<style>
    /* Custom styling for dropdown and search input */
    .custom-select-container {
        position: relative;
        width: 100%;
    }

    #departmentSearch {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
        transition: border-color 0.3s;
    }

        #departmentSearch:focus {
            border-color: #007bff;
            outline: none;
        }

    .custom-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
        border: 1px solid #ccc;
        border-top: none;
        background-color: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: none;
        z-index: 10;
    }

    .custom-dropdown-item {
        padding: 10px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.2s ease;
    }

        .custom-dropdown-item:hover,
        .custom-dropdown-item.highlight {
            background-color: #007bff;
            color: white;
        }

    .highlight {
        background-color: #007bff;
        color: white;
    }

    .form-row {
        margin-bottom: 1rem;
    }

    .form-label {
        font-size: 16px;
        font-weight: bold;
    }

    .btn-search {
        background-color: #007bff;
        border-color: #007bff;
        color: white;
        padding: 10px 20px;
        font-size: 16px;
        font-weight: 500;
        border-radius: 4px;
        transition: background-color 0.3s;
    }

        .btn-search:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

    .pagination .page-item a {
        color: #007bff;
    }

        .pagination .page-item a:hover {
            color: #0056b3;
        }
</style>

<a href="@Url.Action("Create", "Course")" class="btn btn-success btn-sm">
    Create
</a>


<form method="get" class="d-flex mb-4">
    <!-- Course Code Filter -->
    <div class="row g-3">
        <div class="col-md-4">
            <div class="form-row">
                <label for="courseCode" class="form-label">Course Code</label>
                <input type="text" name="courseCode" value="@Model.CourseCodeFilter" class="form-control" placeholder="Search by course code" />
            </div>
        </div>

        <!-- Name Filter -->
        <div class="col-md-4">
            <div class="form-row">
                <label for="name" class="form-label">Course Name</label>
                <input type="text" name="name" value="@Model.NameFilter" class="form-control" placeholder="Search by course name" />
            </div>
        </div>

        <!-- Department Filter -->
        <div class="col-md-4">
            <div class="form-row">
                <label for="departmentSearch" class="form-label">Department</label>
                <div class="custom-select-container">
                    <input type="text" id="departmentSearch" name="DepartmentName" class="form-control" placeholder="Search Department" autocomplete="off"  />
                    <input type="hidden" id="departmentId" name="DepartmentId">
                    <div id="departmentDropdown" class="custom-dropdown">
                        <ul id="departmentList"></ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Search Button -->
    <div class="mt-3">
        <button type="submit" class="btn btn-search">Search</button>
    </div>
</form>

<!-- Course List Table -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Course Code</th>
            <th>Course Name</th>
            <th>Department</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var course in Model.Courses)
        {
            <tr>
                <td>@course.CourseCode</td>
                <td>@course.Name</td>
                <td>@course.Department.Name</td>
                <td>
                    <!-- View Course Details Button -->

                    <!-- Edit Course Button -->
                    <a href="@Url.Action("Edit", "Course", new { id = course.Id })" class="btn btn-warning btn-sm">
                        Edit
                    </a>

                    <!-- Delete Course Button -->
                    <a href="javascript:void(0)" class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#deleteCourseModal" data-id="@course.Id" data-name="@course.Name">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination Controls -->
<div class="d-flex justify-content-between align-items-center">
    <div>
        <p>Page @Model.Page of @((Model.TotalCount + Model.Limit - 1) / Model.Limit)</p>
    </div>
    <div>
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item @(Model.Page == 1 ? "disabled" : "")">
                    <a class="page-link" href="@Url.Action("Index", "Course", new { page = 1, courseCode = Model.CourseCodeFilter, name = Model.NameFilter, departmentId = Model.DepartmentIdFilter })">First</a>
                </li>
                <li class="page-item @(Model.Page == 1 ? "disabled" : "")">
                    <a class="page-link" href="@Url.Action("Index", "Course", new { page = Model.Page - 1, courseCode = Model.CourseCodeFilter, name = Model.NameFilter, departmentId = Model.DepartmentIdFilter })">Previous</a>
                </li>
                <li class="page-item @(Model.Page == (Model.TotalCount + Model.Limit - 1) / Model.Limit ? "disabled" : "")">
                    <a class="page-link" href="@Url.Action("Index", "Course", new { page = Model.Page + 1, courseCode = Model.CourseCodeFilter, name = Model.NameFilter, departmentId = Model.DepartmentIdFilter })">Next</a>
                </li>
                <li class="page-item @(Model.Page == (Model.TotalCount + Model.Limit - 1) / Model.Limit ? "disabled" : "")">
                    <a class="page-link" href="@Url.Action("Index", "Course", new { page = (Model.TotalCount + Model.Limit - 1) / Model.Limit, courseCode = Model.CourseCodeFilter, name = Model.NameFilter, departmentId = Model.DepartmentIdFilter })">Last</a>
                </li>
            </ul>
        </nav>
    </div>
</div>


<div class="modal fade" id="deleteCourseModal" tabindex="-1" aria-labelledby="deleteCourseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteCourseModalLabel">Delete Course</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this course?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form method="post" asp-action="Delete">
                    <input type="hidden" id="deleteCourseId" name="id" />
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        const limit = 5;
        let departmentPage = 1;
        let currentDepartmentIndex = -1;

        // Live search for Departments
        $("#departmentSearch").on("input", function () {
            var searchTerm = $(this).val();
            if (searchTerm.length >= 2) {
                searchDepartments(searchTerm, departmentPage);
            } else {
                $("#departmentDropdown").hide();
            }
        });

        // Function to search for Departments dynamically using AJAX
        function searchDepartments(searchTerm, page) {
            $.ajax({
                url: '/Course/Create',  // Adjust to your actual backend endpoint
                type: 'GET',
                data: { departmentName: searchTerm, departmentPage: page, limit: limit },
                success: function (response) {
                    updateDropdown("#departmentDropdown", "#departmentList", response.departments, 'department');
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching departments:", error);
                }
            });
        }

        // Function to update the dropdown with search results
        function updateDropdown(dropdownSelector, listSelector, data, type) {
            const list = $(listSelector);
            list.empty(); // Clear previous list items

            if (data && data.length > 0) {
                data.forEach((item, index) => {
                    list.append(`<li class="list-group-item custom-dropdown-item" data-id="${item.id}" data-index="${index}">${item.name}</li>`);
                });
                $(dropdownSelector).show();
            } else {
                list.append('<li class="list-group-item">No items found</li>');
                $(dropdownSelector).show();
            }

            // Reset the index when a new search happens
            currentDepartmentIndex = -1;
        }

        // Handle selecting an item from the dropdown
        $(document).on('click', '.custom-dropdown-item', function () {
            const selectedText = $(this).text();
            const selectedId = $(this).data('id');  // Get the Id of the selected item

            // Set the value of the input field with the name, but set the hidden input with the Id
            $(this).closest('.custom-select-container').find('input').val(selectedText);
            $(this).closest('.custom-select-container').find('input[type="hidden"]').val(selectedId); // Store the Id in hidden input

            $(this).closest('.custom-dropdown').hide();
        });

        // Keyboard navigation for department search
        $(document).on('keydown', '#departmentSearch', function (e) {
            handleArrowNavigation(e, '#departmentList', 'department');
        });

        // Function to handle arrow key navigation
        function handleArrowNavigation(e, listSelector, type) {
            const listItems = $(listSelector).children();
            if (listItems.length === 0) return;

            if (e.key === 'ArrowDown') {
                currentDepartmentIndex = Math.min(currentDepartmentIndex + 1, listItems.length - 1);
            } else if (e.key === 'ArrowUp') {
                currentDepartmentIndex = Math.max(currentDepartmentIndex - 1, 0);
            } else if (e.key === 'Enter') {
                // Select the currently focused item
                const focusedItem = $(listItems).eq(currentDepartmentIndex);
                if (focusedItem.length) {
                    const selectedText = focusedItem.text();
                    const selectedId = focusedItem.data('id'); // Get the Id of the selected item
                    $(focusedItem).closest('.custom-select-container').find('input').val(selectedText);
                    $(focusedItem).closest('.custom-select-container').find('input[type="hidden"]').val(selectedId); // Store the Id in hidden input
                    $(focusedItem).closest('.custom-dropdown').hide();
                }
            }

            // Highlight the selected item
            listItems.removeClass('highlight');
            const selectedItem = $(listItems).eq(currentDepartmentIndex);
            selectedItem.addClass('highlight');
        }

        // Close dropdown if clicking outside
        $(document).on('click', function (e) {
            if (!$(e.target).closest('.custom-select-container').length) {
                $('.custom-dropdown').hide();
            }
        });
    });

        const deleteCourseModal = document.getElementById('deleteCourseModal');
    if (deleteCourseModal) {
        deleteCourseModal.addEventListener('show.bs.modal', function (event) {
            const button = event.relatedTarget; // Button that triggered the modal
            const courseId = button.getAttribute('data-id');
            const courseName = button.getAttribute('data-name');

            // Set the hidden field for the course ID
            const deleteCourseIdInput = deleteCourseModal.querySelector('#deleteCourseId');
            deleteCourseIdInput.value = courseId;

            // Optionally, display the course name in the confirmation message
            const modalBody = deleteCourseModal.querySelector('.modal-body');
            modalBody.innerHTML = `<p>Are you sure you want to delete the course <strong>${courseName}</strong>?</p>`;
        });
    }

</script>