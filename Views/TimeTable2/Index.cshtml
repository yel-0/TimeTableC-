<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">

@{
    var totalAssignCount = Model.TotalAssignCount;
    var totalTimetableCount = Model.TotalTimetableCount;
    var courseOccurrences = Model.CourseOccurrences;
}


<style>

    td {
        width: 200px;
        word-wrap: break-word;
    }

    /* Custom CSS to increase row height */
    .table-bordered td {
        height: 100px; /* Adjust the height as needed */
        vertical-align: middle; /* Center content vertically */
    }

        /* Reduce the width of the lunch column */
        .table-bordered td.lunch {
            width: 150px; /* Adjust the width as needed */
        }

    .course-list {
        display: flex;
        flex-direction: column;
        gap: 10px;
        max-width: 700px; /* Adjust width as needed */
    }

    .course-item {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px;
        cursor: pointer;
    }

    .course-radio {
        transform: scale(1.2);
        cursor: pointer;
    }

    .course-details {
        font-weight: bold;
        flex-grow: 1;
    }

    .faculty-name {
        color: #555;
        font-style: italic;
    }

    .custom-dropdown {
        display: none;
        position: absolute;
        background: white;
        border: 1px solid #ddd;
        width: 100%;
        max-height: 150px;
        overflow-y: auto;
        list-style: none;
        padding: 0;
        margin: 0;
        z-index: 10;
    }

    .custom-dropdown-item {
        padding: 8px;
        cursor: pointer;
    }

        .custom-dropdown-item:hover {
            background: #f0f0f0;
        }

    .custom-select-container {
        position: relative;
    }

    .radio-label {
        display: flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        font-size: 14px;
    }

    input[type="radio"] {
        accent-color: #007bff; /* Blue color for the radio button */
        width: 20px;
        height: 20px;
        cursor: pointer;
    }

        input[type="radio"]:checked {
            background-color: #007bff;
        }

    .radio-container{
		display: flex;
		align-items: center;
		gap: 5px;
		/* border: 2px solid #007bff; */
		padding: 5px;
		border-radius: 5px;
        background-color:green;
		color: white;
    }

    .course-container-current-times {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        width:100%;
        gap:5px;
    }

    .table-container-for{
        display: flex;
        flex-direction: row;
        justify-content: space-around;
        align-items: center;
    }


</style>
<form asp-action="Index" method="get" class="mb-3">
    <div class="row">


        <!-- Major Search Input -->
        <div class="mb-3">
            <label class="form-label">Major</label>
            <select id="majorSelect" name="MajorId" class="form-control border-primary" required>
                <option value="">-- Select Major --</option>
                @foreach (var major in ViewBag.Majors)
                {
                    <option value="@major.Id">
                        @major.Name
                    </option>
                }
            </select>
        </div>

        <script>
            document.addEventListener("DOMContentLoaded", function () {
                // Function to get URL parameter value
                function getUrlParameter(name) {
                    const urlParams = new URLSearchParams(window.location.search);
                    return urlParams.get(name);
                }

                // Get the "MajorId" parameter from the URL and set selected value
                const majorIdValue = getUrlParameter("MajorId");
                if (majorIdValue) {
                    document.getElementById("majorSelect").value = majorIdValue;
                }
            });
        </script>



        <div class="col-md-2">
            <label for="section" class="form-label">Section</label>
            <select id="section" required name="section" class="form-select border-primary">
                <option value="">Select a Section</option>
                @for (char sec = 'A'; sec <= 'J'; sec++) // Renamed 'section' to 'sec'
                {
                    <option value="@sec">@sec</option>
                }
            </select>
        </div>

        <div class="col-md-6 mb-3">
            <label for="semester" class="form-label">Semester</label>
            <select id="semester" required name="semester" class="form-select border-primary">
                <option value="">Select a Semester</option>
                @for (int i = 1; i <= 15; i++)
                {
                    <option value="@i"> Semester @i </option>
                }
            </select>
        </div>

        <script>
            // Function to get URL parameter by name
            function getUrlParameter(name) {
                const urlParams = new URLSearchParams(window.location.search);
                return urlParams.get(name);
            }

            // Get the "semester" parameter from the URL and set selected value
            const semesterValue = getUrlParameter("semester");
            if (semesterValue) {
                document.getElementById("semester").value = semesterValue;
            }

            // Get the "section" parameter from the URL and set selected value
            const sectionValue = getUrlParameter("section");
            if (sectionValue) {
                document.getElementById("section").value = sectionValue;
            }
        </script>

        <div class="col-md-2">
            <label for="year" class="form-label">Year</label>
            <input type="number" required name="year" id="year" class="form-control" />
        </div>

        <script>
            // Function to get URL parameter by name
            function getUrlParameter(name) {
                const urlParams = new URLSearchParams(window.location.search);
                return urlParams.get(name);
            }

            // Get the "year" parameter from the URL or use the current year as default
            const yearValue = getUrlParameter("year") || new Date().getFullYear();

            // Set the value of the year input
            document.getElementById("year").value = yearValue;
        </script>
        <div class="col-md-2 align-self-end">
            <button type="submit" class="btn btn-primary w-100">Filter</button>
        </div>
    </div>
</form>


<div class="container mt-4">
    <h2 class="text-center mb-3">Class Timetable</h2>

  
        <div class="table-responsive">
            <table class="table table-bordered text-center">
                <thead class="bg-primary text-white" id="timetable-header">
                    <!-- Timeslot headers will be added dynamically with JS -->
                </thead>
                <tbody id="timetable-body">
                    <!-- Rows will be added dynamically with JS -->
                </tbody>
            </table>
        </div>
    
</div>




<script>
    const timetableEntries = @Html.Raw(Json.Serialize(Model.TimetableEntries));
    const days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];
    const timetableBody = document.getElementById("timetable-body");
    const timetableHeader = document.getElementById("timetable-header");



    // Create the timeslot headers dynamically
    const timeslots = ["Day/Time", "9:00 - 10:00", "10:00 - 11:00", "11:00 - 12:00", "12:00 - 1:00", "1:00 - 2:00", "2:00 - 3:00", "3:00 - 4:00"];
    let headerRow = "<tr>";

    timeslots.forEach((timeslot, index) => {
        // Apply bg-warning class only to the 12:00 - 1:00 slot
        if (index === 4) { // 12:00 - 1:00 at index 4 
            headerRow += `<th class="bg-warning  text-dark fw-bold lunch" style="width:300px;" >${timeslot}</th>`;
        } else {
            headerRow += `<th>${timeslot}</th>`;
        }
    });

    headerRow += "</tr>";
    timetableHeader.innerHTML = headerRow;

    // Create the timetable structure to store courses by day and timeslot
    const timetableStructure = {
        "Monday": Array(7).fill(null),
        "Tuesday": Array(7).fill(null),
        "Wednesday": Array(7).fill(null),
        "Thursday": Array(7).fill(null),
        "Friday": Array(7).fill(null)
    };

    // Function to map the start and end times to the correct timeslot index
    function getTimeslotIndex(startTime, endTime) {
        const timeSlots = [
            { start: "09:00", end: "10:00" },
            { start: "10:00", end: "11:00" },
            { start: "11:00", end: "12:00" },
            { start: "12:00", end: "13:00" },
            { start: "13:00", end: "14:00" },
            { start: "14:00", end: "15:00" },
            { start: "15:00", end: "16:00" }
        ];

        for (let i = 0; i < timeSlots.length; i++) {
            if (startTime === timeSlots[i].start && endTime === timeSlots[i].end) {
                return i;
            }
        }
        return -1; // No matching timeslot found
    }

    // Populate the timetable structure with courses
    timetableEntries.forEach(timetable => {
        const dayIndex = days.indexOf(timetable.dayOfWeek);
        const timeslotIndex = getTimeslotIndex(timetable.startTime.slice(0, 5), timetable.endTime.slice(0, 5));

        if (dayIndex !== -1 && timeslotIndex !== -1) {
            timetableStructure[timetable.dayOfWeek][timeslotIndex] = timetable;
        }
    });

     
                                    // <span class="classroom-name">(${timetable.classroom.name})</span>

    // Create timetable rows dynamically
    days.forEach((day, rowIndex) => {
        let row = `<tr><td class="fw-bold">${day}</td>`;

        for (let i = 0; i < 7; i++) {
            const timetable = timetableStructure[day][i];
            if (timetable) {
                row += `<td >
                     <div class="course-container-current-times">

      <span class="course-name">${timetable.assignCourse.course.shortTerm}</span>



                      <a href="#" class="btn btn-danger"
       data-bs-toggle="modal"
       data-bs-target="#deleteModalTemplate"
       data-course-name="${timetable.assignCourse.course.name}"
       data-classroom-name="${timetable.classroom.name}"
       data-timetable-id="${timetable.id}">
      <i class="fas fa-trash" style="font-size: 12px;"></i>
    </a>

                       
                     </div>



                        </td>`;
            } else if (i === 3) {
                row += `<td class="bg-warning text-dark fw-bold lunch"><span class="">Lunch</span></td>`;
            } else {
                row += `<td>
                             <div class="radio-button-container ">
       <label for="scheduleRadio${rowIndex}-${i}" class="radio-button ">
          <span class="text-success fw-bold">LMS</span><br>
          <div class="radio-container">
          
            <input type="radio"
                 id="scheduleRadio${rowIndex}-${i}"
                 name="schedule"
                 value="${day}-${i}"
                  <span>Add</span>
          </div>
         
       </label>
    </div>

                        </td>`;
            }
        }

        row += `</tr>`;
        timetableBody.innerHTML += row;


    });
         

          function validateAndSubmit(event) {
        event.preventDefault(); // Prevent default form submission

        const urlParams = new URLSearchParams(window.location.search);
        const requiredParams = ["MajorId", "semester", "year", "section"];

        // Ensure required parameters are present
        const allParamsPresent = requiredParams.every(param => urlParams.has(param) && urlParams.get(param).trim());
        if (!allParamsPresent) {
            alert("Please make sure you have selected a Major, Semester, Year, and Section.");
            return false;
        }

        const timeSlots = [
            { start: "09:00", end: "10:00" },
            { start: "10:00", end: "11:00" },
            { start: "11:00", end: "12:00" },
            { start: "12:00", end: "13:00" },
            { start: "13:00", end: "14:00" },
            { start: "14:00", end: "15:00" },
            { start: "15:00", end: "16:00" }
        ];

        const schedule = document.querySelector('input[name="schedule"]:checked');
        const selectedCourse = document.querySelector('input[name="selectedCourse"]:checked');

        // Ensure both schedule and course selection
        if (!schedule || !selectedCourse) {
            alert("Please make sure both a schedule and a course are selected.");
            return false;
        }

        // Process the selected schedule
        const [day, index] = schedule.value.split('-');
        const timeslotIndex = parseInt(index);

        if (timeslotIndex >= 0 && timeslotIndex < timeSlots.length) {
            const selectedTimeslot = timeSlots[timeslotIndex];

            // Set values in hidden inputs
            document.getElementById("assignCourseId").value = selectedCourse.value;
            document.getElementById("dayOfWeek").value = day;
            document.getElementById("startTime").value = selectedTimeslot.start;
            document.getElementById("endTime").value = selectedTimeslot.end;

          

            // Submit the form after setting values
            document.getElementById("addCourseForm").submit();
        } else {
            alert("Invalid timeslot selected.");
            return false;
        }
    }


</script>

<script>

         $(document).ready(function() {
        $('#deleteModalTemplate').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget); // Button that triggered the modal
            var courseName = button.data('course-name'); // Extract course name from data-* attributes
            var classroomName = button.data('classroom-name'); // Extract classroom name
            var timetableId = button.data('timetable-id'); // Extract timetable ID
            console.log("Course name: " + courseName);
            var modal = $(this);
            modal.find('#course-name').text(courseName); // Dynamically set course name
            modal.find('#delete-course-btn').attr('data-timetable-id', timetableId); // Set timetable ID on the delete button
                modal.find('#timetable-id-input').val(timetableId);
        });
    });


</script>

<!-- Modal Template for Delete Confirmation -->
<div class="modal fade" id="deleteModalTemplate" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Delete Course</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Form to handle deletion -->
                <form id="delete-course-form" asp-action="Delete" method="POST">
                    Do you want to delete <strong id="course-name"></strong> from this timetable?
                    <!-- Hidden input field to store the timetableId -->
                    <input type="hidden" id="timetable-id-input" name="timetableId">
                  
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-danger" id="delete-course-btn" form="delete-course-form">Delete</button>
            </div>
        </div>
    </div>
</div>





<!-- Add Course Button (Triggers Modal) -->
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCourseModal">
    Add Course
</button>

<!-- Bootstrap Modal -->
<div class="modal fade" id="addCourseModal" tabindex="-1" aria-labelledby="addCourseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addCourseModalLabel">Add Course</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addCourseForm" method="post" asp-action="Create" onsubmit="return validateAndSubmit(event)">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Classroom</label>
                        <div class="custom-select-container">
                            <input type="text" id="classroomSearch" name="ClassroomName" class="form-control border-primary" placeholder="Search Classroom" required autocomplete="off" />
                            <input type="hidden" id="classroomId" name="ClassroomId" />
                            <div id="classroomDropdown" class="custom-dropdown shadow">
                                <ul id="classroomList"></ul>
                            </div>
                        </div>
                    </div>
                    <!-- Boolean Radio Button -->
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Allow this teacher to teach at overlapping times?</label>

                            <div class="form-check">
                                <input class="form-check-input" type="radio" id="isActiveTrue" name="IsActive" value="true" />
                                <label class="form-check-label" for="isActiveTrue">Yes</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" id="isActiveFalse" name="IsActive" value="false" checked />
                                <label class="form-check-label" for="isActiveFalse">No</label>
                            </div>
                        </div>
                    </div>

                    <!-- Hidden inputs -->
                    <input type="hidden" id="assignCourseId" name="AssignCourseId" />
                    <input type="hidden" id="dayOfWeek" name="DayOfWeek" />
                    <input type="hidden" id="startTime" name="StartTime" />
                    <input type="hidden" id="endTime" name="EndTime" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Confirm</button>
                </div>
            </form>
        </div>
    </div>
</div>


<!-- Bootstrap JS (Needed for Modal) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>


<div class="table-container-for">
    <!-- First Table (Course List) -->
    <div class="course-list">
        @foreach (var assign in Model.AssignCourses)
        {
            <div class="course-item">
                <input type="radio" name="selectedCourse" value="@assign.Id" class="course-radio"
                       data-faculty-id="@assign.Faculty?.Id">
                <span class="course-details">
                    @assign.Course?.CourseCode &nbsp;&nbsp;&nbsp;&nbsp;
                    @assign.Course?.Name
                </span>
                <span class="faculty-name">— @assign.Faculty?.Name</span>
            </div>
        }
    </div>

    <!-- Second Table (Course Occurrences) -->
    <div class="course-occurrences" style="width: 48%; display: flex; flex-direction: column; align-items: center;">
        @if (Model.CourseOccurrences.Count > 0)
        {
            <table class="table table-striped" style="width: 100%;">
                <thead>
                    <tr>
                        @* <th>Course Name</th> *@
                        <th>Course Code</th>
                        <th>Count</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.CourseOccurrences)
                    {
                        <tr>
                            @* <td>@item.Value.CourseName</td> *@
                            <td>@item.Value.CourseCode</td>
                            <td>@item.Value.Count</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

    </div>

</div>









<script>
    $(document).ready(function () {
        const limit = 5;

        function searchItems(type, term, page) {
            $.ajax({
                url: '/Home/GetDropDownData',
                type: 'GET',
                data: { [`${type}Name`]: term, [`${type}Page`]: page, limit: limit },
                success: function (response) {
                    let listId = `#${type}Dropdown`;
                    $(listId).empty().show();

                    let items = response[type + 's'] || response.faculties;

                    if (Array.isArray(items) && items.length > 0) {
                        items.forEach(item => {
                            $(listId).append(`<li class="custom-dropdown-item" data-id="${item.id}">${item.name}</li>`);
                        });
                    } else {
                        $(listId).append('<li class="custom-dropdown-item">No results found</li>');
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching data:", error);
                }
            });
        }

        // Live search for Faculty
        // $("#facultySearch").on("input", function () {
        //     let searchTerm = $(this).val();
        //     if (searchTerm.length >= 2) {
        //         searchItems('faculty', searchTerm, 1);
        //     } else {
        //         $("#facultyDropdown").hide();
        //     }
        // });

        // Live search for Course
         $("#classroomSearch").on("input", function () {
        var searchTerm = $(this).val();
        if (searchTerm.length >= 2) {
            searchItems('classroom', searchTerm, 1);
        } else {
            $("#classroomDropdown").hide();
        }
    });


        // Live search for Major
        $("#majorSearch").on("input", function () {
            var searchTerm = $(this).val();
            if (searchTerm.length >= 2) {
                searchItems('major', searchTerm, 1);
            } else {
                $("#majorDropdown").hide();
            }
        });

        // Handle selecting an item from the dropdown
        $(document).on('click', '.custom-dropdown-item', function () {
            let itemId = $(this).data('id');
            let itemName = $(this).text();
            let inputBox = $(this).closest('.custom-select-container').find('input').first();
            let hiddenInput = $(this).closest('.custom-select-container').find('input[type="hidden"]');

            inputBox.val(itemName);
            hiddenInput.val(itemId);

            $(this).closest('.custom-dropdown').hide();
        });


    });
</script>
<!-- Bootstrap Modal -->
<div class="modal fade" id="timetableModal" tabindex="-1" aria-labelledby="timetableModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="timetableModalLabel">Timetable Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p><strong>Course Code:</strong> <span id="modalCourseCode"></span></p>
                <p><strong>Day:</strong> <span id="modalDay"></span></p>
                <p><strong>Start Time:</strong> <span id="modalStartTime"></span></p>
                <p><strong>End Time:</strong> <span id="modalEndTime"></span></p>
                <p><strong>Semester:</strong> <span id="modalSemester"></span></p>
                <p><strong>Section:</strong> <span id="modalSection"></span></p>
                <p><strong>Course:</strong> <span id="modalCourse"></span></p>
                <p><strong>Major:</strong> <span id="modalMajor"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        let responseData = [];

        $('input[name="selectedCourse"]').change(function () {
            const selectedCourse = $('input[name="selectedCourse"]:checked');

            if (selectedCourse.length > 0) {
                const facultyId = selectedCourse.attr('data-faculty-id');


                $.ajax({
                    url: '/Timetable2/ByFaculty',
                    type: 'GET',
                    data: { facultyId: facultyId },
                    dataType: 'json',
                    success: function (response) {
                        responseData = response;
                        let tableBody = $('#timetable-body');

                        // Remove previously appended timetable entries
                        $(".timetable-entry").remove();

                        const timeSlots = [
                            { start: "09:00", end: "10:00" },
                            { start: "10:00", end: "11:00" },
                            { start: "11:00", end: "12:00" },
                            { start: "12:00", end: "13:00" },
                            { start: "13:00", end: "14:00" },
                            { start: "14:00", end: "15:00" },
                            { start: "15:00", end: "16:00" }
                        ];
                        // Iterate through table rows
                        tableBody.find('tr').each(function () {
                            let firstCellText = $(this).find('td:first').text(); // Day

                            responseData.forEach(timetable => {
                                if (timetable.dayOfWeek === firstCellText) {
                                    let timeSlotIndex = timeSlots.findIndex(slot =>
                                        slot.start === timetable.startTime && slot.end === timetable.endTime
                                    );

                                    if (timeSlotIndex !== -1) {
                                        let cell = $(this).find(`td:eq(${timeSlotIndex + 1})`);

                                        // Ensure the parent div inside the td exists
                                        if (cell.find(".timetable-container").length === 0) {
                                            let containerDiv = $('<div>', {
                                                class: 'timetable-container',
                                                css: {
                                                    display: "flex",
                                                    flexDirection: "row",
                                                    justifyContent: "center",
                                                    alignItems: "center",
                                                    width: "100%",
                                                    height: "100%",
                                                    gap:"3px"
                                                }
                                            });
                                            cell.append(containerDiv);
                                        }

                                        let containerDiv = cell.find(".timetable-container");

                                        // Create a new timetable entry with requested styles
                                        let newDiv = $('<div>', {
                                            class: 'timetable-entry',
                                            css: {
                                                backgroundColor: "yellow",
                                                color: "green",
                                                width: "50px",
                                                textAlign: "center",
                                                padding: "5px",
                                                borderRadius: "4px",
                                                cursor: "pointer",
                                                marginTop: "3px",
                                                marginBottom: "3px",
                                                display: "flex",
                                                flexDirection: "row",
                                                alignItems: "center",
                                                justifyContent: "center"
                                            },
                                            "data-id": timetable.id,
                                            "data-day": timetable.dayOfWeek,
                                            "data-start-time": timetable.startTime,
                                            "data-end-time": timetable.endTime,
                                            "data-semester": timetable.assignCourse.semester,
                                            "data-section": timetable.assignCourse.section,
                                            "data-course": timetable.assignCourse.course.name,
                                            "data-major": timetable.assignCourse.major.name,
                                            "data-course-code": timetable.assignCourse.course.courseCode 
                                        });

                                        // Add only the icon inside the div
                                        let icon = $('<i>', {
                                            class: 'fas fa-book', // Font Awesome book icon
                                            css: { fontSize: "18px" }
                                        });

                                        newDiv.append(icon);

                                        // Append new div to the parent container
                                        containerDiv.append(newDiv);
                                    }
                                }
                            });
                        });

                        // Attach click event to timetable entries
                        $(".timetable-entry").off("click").on("click", function () {
                            $("#modalId").text($(this).data("id"));
                            $("#modalDay").text($(this).data("day"));
                            $("#modalStartTime").text($(this).data("start-time"));
                            $("#modalEndTime").text($(this).data("end-time"));
                            $("#modalSemester").text($(this).data("semester"));
                            $("#modalSection").text($(this).data("section"));
                            $("#modalCourse").text($(this).data("course"));
                            $("#modalCourseCode").text($(this).data("course-code")); // Display course code
                            $("#modalMajor").text($(this).data("major"));
                            $("#timetableModal").modal("show");
                        });
                    },
                    error: function () {
                        console.log("Error fetching data.");
                    }
                });
            }
        });
    });
</script>

















