
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<style>

    td {
        width: 200px;
        word-wrap: break-word;
    }

    /* Custom CSS to increase row height */
    .table-bordered td {
        height: 100px; /* Adjust the height as needed */
        vertical-align: middle; /* Center content vertically */
    }

        /* Reduce the width of the lunch column */
        .table-bordered td.lunch {
            width: 150px; /* Adjust the width as needed */
        }

    .course-list {
        display: flex;
        flex-direction: column;
        gap: 10px;
        max-width: 700px; /* Adjust width as needed */
    }

    .course-item {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px;
        cursor: pointer;
    }

    .course-radio {
        transform: scale(1.2);
        cursor: pointer;
    }

    .course-details {
        font-weight: bold;
        flex-grow: 1;
    }

    .faculty-name {
        color: #555;
        font-style: italic;
    }

    .custom-dropdown {
        display: none;
        position: absolute;
        background: white;
        border: 1px solid #ddd;
        width: 100%;
        max-height: 150px;
        overflow-y: auto;
        list-style: none;
        padding: 0;
        margin: 0;
        z-index: 10;
    }

    .custom-dropdown-item {
        padding: 8px;
        cursor: pointer;
    }

        .custom-dropdown-item:hover {
            background: #f0f0f0;
        }

    .custom-select-container {
        position: relative;
    }

    .radio-label {
        display: flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        font-size: 14px;
    }

    input[type="radio"] {
        accent-color: #007bff; /* Blue color for the radio button */
        width: 20px;
        height: 20px;
        cursor: pointer;
    }

        input[type="radio"]:checked {
            background-color: #007bff;
        }

    .radio-container {
        display: flex;
        align-items: center;
        gap: 5px;
        /* border: 2px solid #007bff; */
        padding: 5px;
        border-radius: 5px;
        background-color: green;
        color: white;
    }

</style>
<a href="/Home/FacultySearch">Go to Faculty Search</a>

<form  asp-action="Index" method="get" class="mb-3">
    <div class="row">


        <!-- Major Search Input -->
        <div class="mb-3">
            <label class="form-label">Major</label>
            <select id="majorSelect" name="MajorId" class="form-control border-primary" required>
                <option value="">-- Select Major --</option>
                @foreach (var major in ViewBag.Majors)
                {
                    <option value="@major.Id">
                        @major.Name
                    </option>
                }
            </select>
        </div>

        <script>
            document.addEventListener("DOMContentLoaded", function () {
                // Function to get URL parameter value
                function getUrlParameter(name) {
                    const urlParams = new URLSearchParams(window.location.search);
                    return urlParams.get(name);
                }

                // Get the "MajorId" parameter from the URL and set selected value
                const majorIdValue = getUrlParameter("MajorId");
                if (majorIdValue) {
                    document.getElementById("majorSelect").value = majorIdValue;
                }
            });
        </script>

      


        <div class="col-md-2">
            <label for="section" class="form-label">Section</label>
            <select id="section" required name="section" class="form-select border-primary">
                <option value="">Select a Section</option>
                @for (char sec = 'A'; sec <= 'J'; sec++) // Renamed 'section' to 'sec'
                {
                    <option value="@sec">@sec</option>
                }
            </select>
        </div>

        <div class="col-md-6 mb-3">
            <label for="semester" class="form-label">Semester</label>
            <select id="semester" required name="semester" class="form-select border-primary">
                <option value="">Select a Semester</option>
                @for (int i = 1; i <= 15; i++)
                {
                    <option value="@i"> Semester @i </option>
                }
            </select>
        </div>

        <script>
            // Function to get URL parameter by name
            function getUrlParameter(name) {
                const urlParams = new URLSearchParams(window.location.search);
                return urlParams.get(name);
            }

            // Get the "semester" parameter from the URL and set selected value
            const semesterValue = getUrlParameter("semester");
            if (semesterValue) {
                document.getElementById("semester").value = semesterValue;
            }

            // Get the "section" parameter from the URL and set selected value
            const sectionValue = getUrlParameter("section");
            if (sectionValue) {
                document.getElementById("section").value = sectionValue;
            }
        </script>


        <div class="col-md-2">
            <label for="year" class="form-label">Year</label>
            <input type="number" required name="year" id="year" class="form-control" />
        </div>

        <script>
            // Function to get URL parameter by name
            function getUrlParameter(name) {
                const urlParams = new URLSearchParams(window.location.search);
                return urlParams.get(name);
            }

            // Get the "year" parameter from the URL or use the current year as default
            const yearValue = getUrlParameter("year") || new Date().getFullYear();

            // Set the value of the year input
            document.getElementById("year").value = yearValue;
        </script>
        <div class="col-md-2 align-self-end">
            <button type="submit" class="btn btn-primary w-100">Filter</button>
        </div>
    </div>
</form>


<div class="container mt-4">
    <h2 class="text-center mb-3">Class Timetable</h2>

    @if (Model.TimetableEntries.Count == 0)
    {
        <div class="text-center">
            <div class="card shadow-lg p-4">
                <h3 class="text-danger">No Timetable Available</h3>
                <p class="text-muted">There are no classes scheduled at the moment.</p>
            </div>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-bordered text-center">
                <thead class="bg-primary text-white" id="timetable-header">
                    <!-- Timeslot headers will be added dynamically with JS -->
                </thead>
                <tbody id="timetable-body">
                    <!-- Rows will be added dynamically with JS -->
                </tbody>
            </table>
        </div>
    }
</div>




<script>
    const timetableEntries = @Html.Raw(Json.Serialize(Model.TimetableEntries));
    const days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];
    const timetableBody = document.getElementById("timetable-body");
    const timetableHeader = document.getElementById("timetable-header");



    // Create the timeslot headers dynamically
    const timeslots = ["Day/Time", "9:00 - 10:00", "10:00 - 11:00", "11:00 - 12:00", "12:00 - 1:00", "1:00 - 2:00", "2:00 - 3:00", "3:00 - 4:00"];
    let headerRow = "<tr>";

    timeslots.forEach((timeslot, index) => {
        // Apply bg-warning class only to the 12:00 - 1:00 slot
        if (index === 4) { // 12:00 - 1:00 at index 4
            headerRow += `<th class="bg-warning  text-dark fw-bold lunch" style="width: 200px;" >${timeslot}</th>`;
        } else {
            headerRow += `<th>${timeslot}</th>`;
        }
    });

    headerRow += "</tr>";
    timetableHeader.innerHTML = headerRow;

    // Create the timetable structure to store courses by day and timeslot
    const timetableStructure = {
        "Monday": Array(7).fill(null),
        "Tuesday": Array(7).fill(null),
        "Wednesday": Array(7).fill(null),
        "Thursday": Array(7).fill(null),
        "Friday": Array(7).fill(null)
    };

    // Function to map the start and end times to the correct timeslot index
    function getTimeslotIndex(startTime, endTime) {
        const timeSlots = [
            { start: "09:00", end: "10:00" },
            { start: "10:00", end: "11:00" },
            { start: "11:00", end: "12:00" },
            { start: "12:00", end: "13:00" },
            { start: "13:00", end: "14:00" },
            { start: "14:00", end: "15:00" },
            { start: "15:00", end: "16:00" }
        ];

        for (let i = 0; i < timeSlots.length; i++) {
            if (startTime === timeSlots[i].start && endTime === timeSlots[i].end) {
                return i;
            }
        }
        return -1; // No matching timeslot found
    }

    // Populate the timetable structure with courses
    timetableEntries.forEach(timetable => {
        const dayIndex = days.indexOf(timetable.dayOfWeek);
        const timeslotIndex = getTimeslotIndex(timetable.startTime.slice(0, 5), timetable.endTime.slice(0, 5));

        if (dayIndex !== -1 && timeslotIndex !== -1) {
            timetableStructure[timetable.dayOfWeek][timeslotIndex] = timetable;
        }
    });



    // Create timetable rows dynamically
    days.forEach((day, rowIndex) => {
        let row = `<tr><td class="fw-bold">${day}</td>`;

        for (let i = 0; i < 7; i++) {
            const timetable = timetableStructure[day][i];
            if (timetable) {
                row += `<td >
                            <div class="course-info">
                                <span class="course-name">${timetable.assignCourse.course.shortTerm}</span><br>
                                <span class="classroom-name">(${timetable.classroom.name})</span>
                            </div>
                             


                        </td>`;
            } else if (i === 3) {
                row += `<td class="bg-warning text-dark fw-bold lunch"><span class="">Lunch</span></td>`;
            } else {
                // Insert "Free" in the empty cells with green text and add radio button
                    row += `<td style="background-color: green; color: white; font-weight: bold; text-align: center; padding: 8px;">
        LMS
    </td>
    `;
            }
        }

        row += `</tr>`;
        timetableBody.innerHTML += row;


    });


        


</script>













<!-- Bootstrap JS (Needed for Modal) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>


<div class="course-list">
    @foreach (var assign in Model.AssignCourses)
    {
        <div class="course-item">
         
            <span class="course-details">
                @assign.Course?.CourseCode &nbsp;&nbsp;&nbsp;&nbsp;
                @assign.Course?.Name
            </span>
            <span class="faculty-name">— @assign.Faculty?.Name</span>
        </div>
    }
</div>








<script>
    $(document).ready(function () {
        const limit = 5;

        function searchItems(type, term, page) {
            $.ajax({
                url: '/Home/GetDropDownData',
                type: 'GET',
                data: { [`${type}Name`]: term, [`${type}Page`]: page, limit: limit },
                success: function (response) {
                    let listId = `#${type}Dropdown`;
                    $(listId).empty().show();

                    let items = response[type + 's'] || response.faculties;

                    if (Array.isArray(items) && items.length > 0) {
                        items.forEach(item => {
                            $(listId).append(`<li class="custom-dropdown-item" data-id="${item.id}">${item.name}</li>`);
                        });
                    } else {
                        $(listId).append('<li class="custom-dropdown-item">No results found</li>');
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching data:", error);
                }
            });
        }

     

        // Live search for Course
         $("#classroomSearch").on("input", function () {
        var searchTerm = $(this).val();
        if (searchTerm.length >= 2) {
            searchItems('classroom', searchTerm, 1);
        } else {
            $("#classroomDropdown").hide();
        }
    });


        // Live search for Major
        $("#majorSearch").on("input", function () {
            var searchTerm = $(this).val();
            if (searchTerm.length >= 2) {
                searchItems('major', searchTerm, 1);
            } else {
                $("#majorDropdown").hide();
            }
        });

        // Handle selecting an item from the dropdown
        $(document).on('click', '.custom-dropdown-item', function () {
            let itemId = $(this).data('id');
            let itemName = $(this).text();
            let inputBox = $(this).closest('.custom-select-container').find('input').first();
            let hiddenInput = $(this).closest('.custom-select-container').find('input[type="hidden"]');

            inputBox.val(itemName);
            hiddenInput.val(itemId);

            $(this).closest('.custom-dropdown').hide();
        });


    });
</script>














